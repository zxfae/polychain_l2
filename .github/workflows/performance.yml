name: Performance Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: performance-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  DFX_VERSION: 0.15.2

jobs:
  rust-benchmarks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Run benchmarks
        run: |
          cargo bench --workspace || echo "No benchmarks found"
          
      - name: Check binary size
        run: |
          echo "## Binary Sizes" >> performance-report.md
          cargo build --release --target wasm32-unknown-unknown || {
            echo "Build failed" >> performance-report.md
            exit 0
          }
          find target/wasm32-unknown-unknown/release -name "*.wasm" -exec ls -lh {} \; >> performance-report.md || echo "No WASM files found" >> performance-report.md

      - name: Memory usage analysis
        run: |
          echo "## Memory Analysis" >> performance-report.md
          cargo test --release -- --nocapture 2>&1 | grep -i "memory\|heap\|stack" >> performance-report.md || echo "No memory stats available" >> performance-report.md

  frontend-performance:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build frontend
        run: |
          npm run build --workspace=src/polychain_l2_frontend || {
            echo "Build failed, creating empty performance report"
            echo "## Frontend Build Failed" >> frontend-performance.md
            echo "Frontend build failed during CI run" >> frontend-performance.md
          }

      - name: Bundle analysis
        run: |
          echo "## Frontend Bundle Analysis" >> frontend-performance.md
          echo "### Bundle sizes:" >> frontend-performance.md
          du -sh src/polychain_l2_frontend/dist/* >> frontend-performance.md || echo "No dist files found" >> frontend-performance.md
          
          echo "### File count:" >> frontend-performance.md
          find src/polychain_l2_frontend/dist -type f | wc -l >> frontend-performance.md

      - name: Lighthouse CI (Static)
        run: |
          echo "## Lighthouse Analysis" >> frontend-performance.md
          npm install -g @lhci/cli@0.12.x || {
            echo "Failed to install Lighthouse CLI" >> frontend-performance.md
            echo "Lighthouse CLI installation failed" >> frontend-performance.md
            exit 0
          }
          if command -v lhci >/dev/null 2>&1 && [ -d "src/polychain_l2_frontend/dist" ]; then
            lhci collect --staticDistDir=src/polychain_l2_frontend/dist --url=http://localhost/index.html || {
              echo "Lighthouse analysis failed" >> frontend-performance.md
            }
          else
            echo "Lighthouse CLI not available or dist directory missing" >> frontend-performance.md
          fi

      - name: Create default performance report if missing
        if: always()
        run: |
          if [ ! -f "frontend-performance.md" ]; then
            echo "## Frontend Performance Report" > frontend-performance.md
            echo "Performance analysis was not completed during this run." >> frontend-performance.md
          fi

      - name: Upload performance artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-reports
          path: |
            frontend-performance.md
            performance-report.md
            .lighthouseci/
          retention-days: 7

  load-testing:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown

      - name: Cache DFX
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/dfinity
            ~/bin/dfx
            ~/.local/bin/dfx
            ~/.local/share/dfx
          key: ${{ runner.os }}-dfx-${{ env.DFX_VERSION }}-${{ hashFiles('dfx.json') }}
          restore-keys: |
            ${{ runner.os }}-dfx-${{ env.DFX_VERSION }}-

      - name: Install DFX
        run: |
          if ! command -v dfx >/dev/null 2>&1 || [ "$(dfx --version | awk '{print $2}')" != "${{ env.DFX_VERSION }}" ]; then
            echo "Installing DFX ${{ env.DFX_VERSION }}..."
            export TERM=dumb
            curl -fsSL https://internetcomputer.org/install.sh | sh -s -- --yes --version ${{ env.DFX_VERSION }} > install.log 2>&1 || {
              cat install.log
              echo "Failed to install DFX"
              exit 1
            }
            cat install.log
          else
            echo "DFX ${{ env.DFX_VERSION }} already installed."
          fi

      - name: Update PATH for DFX
        run: |
          echo "$HOME/bin" >> $GITHUB_PATH
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          echo "$HOME/.local/share/dfx/bin" >> $GITHUB_PATH

      - name: Start DFX network
        run: |
          export PATH="$HOME/bin:$HOME/.local/bin:$HOME/.local/share/dfx/bin:$PATH"
          dfx start --background --clean --host 127.0.0.1:4943
          sleep 10

      - name: Install dependencies and deploy
        run: |
          export PATH="$HOME/bin:$HOME/.local/bin:$HOME/.local/share/dfx/bin:$PATH"
          npm ci
          npm run build --workspace=src/polychain_l2_frontend || {
            echo "## Load Testing Results" >> load-test-results.md
            echo "Frontend build failed, skipping load test" >> load-test-results.md
            exit 0
          }
          dfx deploy || {
            echo "## Load Testing Results" >> load-test-results.md
            echo "DFX deploy failed, skipping load test" >> load-test-results.md
            exit 0
          }

      - name: Simple load test
        run: |
          export PATH="$HOME/bin:$HOME/.local/bin:$HOME/.local/share/dfx/bin:$PATH"
          echo "## Load Testing Results" >> load-test-results.md
          echo "Test started at: $(date)" >> load-test-results.md
          
          # Check if DFX is running
          if ! dfx ping >/dev/null 2>&1; then
            echo "DFX network not responding, skipping load test" >> load-test-results.md
            exit 0
          fi
          
          # Get frontend canister URL
          FRONTEND_URL=$(dfx canister call polychain_l2_frontend http_request '(record{url="/";method="GET";headers=vec{};body=vec{}})' 2>/dev/null || echo "")
          CANISTER_ID=$(dfx canister id polychain_l2_frontend 2>/dev/null || echo "")
          
          if [ -n "$CANISTER_ID" ]; then
            echo "Testing canister: $CANISTER_ID" >> load-test-results.md
            # Simple stress test with dfx canister calls
            for i in {1..5}; do
              echo "Request $i:" >> load-test-results.md
              timeout 30 dfx canister call polychain_l2_backend greet "(\"load-test-$i\")" >> load-test-results.md 2>&1 || echo "Request $i failed or timed out" >> load-test-results.md
            done
          else
            echo "Could not determine canister ID, testing DFX endpoint" >> load-test-results.md
            # Fallback to DFX health check
            for i in {1..3}; do
              echo "Health check $i:" >> load-test-results.md
              timeout 10 dfx ping >> load-test-results.md 2>&1 || echo "Health check $i failed" >> load-test-results.md
            done
          fi
          
          echo "Test completed at: $(date)" >> load-test-results.md

      - name: Stop DFX
        if: always()
        run: |
          export PATH="$HOME/bin:$HOME/.local/bin:$HOME/.local/share/dfx/bin:$PATH"
          dfx stop

      - name: Create default load test report if missing
        if: always()
        run: |
          if [ ! -f "load-test-results.md" ]; then
            echo "## Load Testing Results" > load-test-results.md
            echo "Load testing was not completed during this run." >> load-test-results.md
          fi

      - name: Upload load test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: load-test-results
          path: load-test-results.md
          retention-days: 7