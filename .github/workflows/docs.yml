name: Documentation

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**/*.rs'
      - 'src/**/*.ts'
      - 'src/**/*.tsx'
      - 'README.md'
      - 'docs/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/**/*.rs'
      - 'src/**/*.ts' 
      - 'src/**/*.tsx'
      - 'README.md'
      - 'docs/**'

concurrency:
  group: docs-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always

jobs:
  rust-docs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Generate Rust documentation
        run: |
          cargo doc --no-deps --document-private-items --workspace
          echo "Rust documentation generated successfully"

      - name: Check documentation coverage
        run: |
          echo "## Documentation Coverage Report" > doc-coverage.md
          
          # Count documented vs undocumented items
          echo "### Rust Documentation" >> doc-coverage.md
          find src -name "*.rs" -exec grep -l "///" {} \; | wc -l > documented_files.txt
          find src -name "*.rs" | wc -l > total_files.txt
          
          echo "- Documented files: $(cat documented_files.txt)" >> doc-coverage.md
          echo "- Total files: $(cat total_files.txt)" >> doc-coverage.md
          
          rm documented_files.txt total_files.txt

      - name: Upload Rust docs
        uses: actions/upload-artifact@v4
        with:
          name: rust-docs
          path: target/doc/
          retention-days: 7

  frontend-docs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate TypeScript documentation
        run: |
          # Install typedoc if not present
          npx typedoc --version || npm install -g typedoc
          
          # Generate docs if tsconfig exists
          if [ -f "src/polychain_l2_frontend/tsconfig.json" ]; then
            npx typedoc --tsconfig src/polychain_l2_frontend/tsconfig.json --out frontend-docs src/polychain_l2_frontend/src || echo "TypeDoc generation completed with warnings"
          else
            echo "No TypeScript config found, skipping TypeDoc generation"
          fi

      - name: Check frontend documentation
        run: |
          echo "### Frontend Documentation" >> doc-coverage.md
          
          # Count TypeScript files with JSDoc comments
          find src/polychain_l2_frontend -name "*.ts" -o -name "*.tsx" | xargs grep -l "/\*\*" | wc -l > documented_ts_files.txt || echo "0" > documented_ts_files.txt
          find src/polychain_l2_frontend -name "*.ts" -o -name "*.tsx" | wc -l > total_ts_files.txt
          
          echo "- Documented TS files: $(cat documented_ts_files.txt)" >> doc-coverage.md
          echo "- Total TS files: $(cat total_ts_files.txt)" >> doc-coverage.md
          
          rm documented_ts_files.txt total_ts_files.txt || true

      - name: Upload frontend docs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: frontend-docs
          path: |
            frontend-docs/
            doc-coverage.md
          retention-days: 7

  api-docs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown

      - name: Cache DFX
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/dfinity
            ~/bin/dfx
            ~/.local/bin/dfx
            ~/.local/share/dfx
          key: ${{ runner.os }}-dfx-0.15.2-${{ hashFiles('dfx.json') }}
          restore-keys: |
            ${{ runner.os }}-dfx-0.15.2-

      - name: Install DFX
        run: |
          if ! command -v dfx >/dev/null 2>&1; then
            echo "Installing DFX..."
            export TERM=dumb
            curl -fsSL https://internetcomputer.org/install.sh | sh -s -- --yes --version 0.15.2
          fi

      - name: Update PATH for DFX
        run: |
          echo "$HOME/bin" >> $GITHUB_PATH
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          echo "$HOME/.local/share/dfx/bin" >> $GITHUB_PATH

      - name: Generate Candid interface docs
        run: |
          export PATH="$HOME/bin:$HOME/.local/bin:$HOME/.local/share/dfx/bin:$PATH"
          
          mkdir -p api-docs
          
          echo "# API Documentation" > api-docs/README.md
          echo "" >> api-docs/README.md
          echo "## Candid Interfaces" >> api-docs/README.md
          
          # Find and document .did files
          find . -name "*.did" -exec echo "### {}" \; -exec cat {} \; >> api-docs/README.md || echo "No .did files found"

      - name: Upload API docs
        uses: actions/upload-artifact@v4
        with:
          name: api-docs
          path: api-docs/
          retention-days: 7

  publish-docs:
    runs-on: ubuntu-latest
    needs: [rust-docs, frontend-docs, api-docs]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all documentation artifacts
        uses: actions/download-artifact@v4

      - name: Combine documentation
        run: |
          mkdir -p combined-docs
          
          # Copy Rust docs
          if [ -d "rust-docs" ]; then
            cp -r rust-docs/* combined-docs/ || echo "No Rust docs to copy"
          fi
          
          # Copy frontend docs
          if [ -d "frontend-docs" ]; then
            mkdir -p combined-docs/frontend
            cp -r frontend-docs/* combined-docs/frontend/ || echo "No frontend docs to copy"
          fi
          
          # Copy API docs
          if [ -d "api-docs" ]; then
            mkdir -p combined-docs/api
            cp -r api-docs/* combined-docs/api/ || echo "No API docs to copy"
          fi
          
          # Create index
          echo "# Polychain L2 Documentation" > combined-docs/index.html
          echo "<h2>Available Documentation:</h2>" >> combined-docs/index.html
          echo "<ul>" >> combined-docs/index.html
          echo "<li><a href='./polychain_l2_backend/index.html'>Rust Backend Documentation</a></li>" >> combined-docs/index.html
          echo "<li><a href='./frontend/index.html'>Frontend Documentation</a></li>" >> combined-docs/index.html
          echo "<li><a href='./api/README.md'>API Documentation</a></li>" >> combined-docs/index.html
          echo "</ul>" >> combined-docs/index.html

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        if: github.ref == 'refs/heads/main'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./combined-docs
          force_orphan: true