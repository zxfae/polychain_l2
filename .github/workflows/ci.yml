name: CI Pipeline

on:
  push:
    branches: [ main, develop, dfx-check, frontend-check, rust-check ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'
  pull_request:
    branches: [ main, develop, dfx-check, frontend-check, rust-check ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  pull-requests: read
  contents: read
  actions: read
  security-events: write

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  DFX_VERSION: 0.15.2
  NODE_ENV: test
  RUST_LOG: debug

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      rust: ${{ steps.filter.outputs.rust }}
      frontend: ${{ steps.filter.outputs.frontend }}
      dfx: ${{ steps.filter.outputs.dfx }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            rust:
              - 'src/**/*.rs'
              - 'Cargo.toml'
              - 'Cargo.lock'
              - 'src/**/Cargo.toml'
            frontend:
              - 'src/polychain_l2_frontend/**'
              - 'package.json'
              - 'package-lock.json'
              - 'tsconfig.json'
            dfx:
              - 'dfx.json'
              - 'src/**/*.did'

  rust-check:
    needs: changes
    if: needs.changes.outputs.rust == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust-version: [stable]
      fail-fast: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust-version }}
          targets: wasm32-unknown-unknown
          components: rustfmt, clippy

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache cargo target
        uses: actions/cache@v4
        with:
          path: target/
          key: ${{ runner.os }}-cargo-target-${{ matrix.rust-version }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-target-${{ matrix.rust-version }}-
            ${{ runner.os }}-cargo-target-

      - name: Install additional tools
        run: |
          # Install wasm-opt for optimization
          sudo apt-get update && sudo apt-get install -y binaryen || echo "binaryen not available"
          
          # Install cargo tools (cached)
          cargo install --locked cargo-audit || echo "cargo-audit installation skipped"
          cargo install --locked cargo-license || echo "cargo-license installation skipped"

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Run tests
        run: |
          cargo test --verbose --workspace
          # Doc tests not supported for cdylib canisters
          cargo bench --no-run

      - name: Security audit
        run: |
          cargo install --locked cargo-audit || true
          cargo audit || echo "Audit warnings detected"

      - name: Check licenses
        run: |
          cargo install --locked cargo-license || true
          cargo license || echo "License check completed"

      - name: Build backend
        run: |
          cargo build --release --target wasm32-unknown-unknown
          wasm-opt --version || echo "wasm-opt not available"
          # Optimize WASM if wasm-opt is available
          if command -v wasm-opt >/dev/null 2>&1; then
            find target/wasm32-unknown-unknown/release -name "*.wasm" -exec wasm-opt -Oz {} -o {}.opt \;
          fi

  frontend-check:
    needs: changes
    if: needs.changes.outputs.frontend == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18]
      fail-fast: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            src/polychain_l2_frontend/node_modules
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-

      - name: Cache DFX
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/dfinity
            ~/bin/dfx
            ~/.local/bin/dfx
            ~/.local/share/dfx
          key: ${{ runner.os }}-dfx-${{ env.DFX_VERSION }}-${{ hashFiles('dfx.json') }}
          restore-keys: |
            ${{ runner.os }}-dfx-${{ env.DFX_VERSION }}-

      - name: Install DFX
        run: |
          if ! command -v dfx >/dev/null 2>&1 || [ "$(dfx --version 2>/dev/null | awk '{print $2}')" != "${{ env.DFX_VERSION }}" ]; then
            echo "Installing DFX ${{ env.DFX_VERSION }}..."
            # Use non-interactive installation method
            export TERM=dumb
            yes '' | curl -fsSL https://internetcomputer.org/install.sh | sh -s -- --version ${{ env.DFX_VERSION }} > install.log 2>&1 || {
              cat install.log
              echo "First installation attempt failed, trying alternative method..."
              # Alternative: Direct download method
              mkdir -p "$HOME/.local/share/dfx/bin"
              curl -fsSL "https://github.com/dfinity/sdk/releases/download/${{ env.DFX_VERSION }}/dfx-${{ env.DFX_VERSION }}-x86_64-linux.tar.gz" | tar -xzf - -C "$HOME/.local/share/dfx/bin" || {
                echo "DFX installation failed completely"
                exit 1
              }
              chmod +x "$HOME/.local/share/dfx/bin/dfx"
            }
            cat install.log || true
          else
            echo "DFX ${{ env.DFX_VERSION }} already installed."
          fi

      - name: Update PATH for DFX
        run: |
          echo "$HOME/bin" >> $GITHUB_PATH
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          echo "$HOME/.local/share/dfx/bin" >> $GITHUB_PATH
          # Also export for current session
          export PATH="$HOME/bin:$HOME/.local/bin:$HOME/.local/share/dfx/bin:$PATH"

      - name: Install dependencies
        run: npm ci

      - name: Lint check
        run: |
          npm run lint --workspace=src/polychain_l2_frontend || echo "Linting issues detected"

      - name: Type check
        run: npm run test --workspace=src/polychain_l2_frontend

      - name: Security scan
        run: |
          npm audit --audit-level=moderate || echo "NPM audit warnings detected"
          npx --yes @cyclonedx/cdxgen -t js -o frontend-bom.json src/polychain_l2_frontend/ || echo "SBOM generation skipped"

      - name: Build frontend
        run: |
          npm run build --workspace=src/polychain_l2_frontend
          # Check bundle size
          du -sh src/polychain_l2_frontend/dist/* || echo "Bundle size check completed"

  dfx-check:
    needs: changes
    if: needs.changes.outputs.dfx == 'true' || needs.changes.outputs.rust == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown
          components: rustfmt, clippy

      - name: Cache DFX
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/dfinity
            ~/bin/dfx
            ~/.local/bin/dfx
            ~/.local/share/dfx
          key: ${{ runner.os }}-dfx-${{ env.DFX_VERSION }}-${{ hashFiles('dfx.json') }}
          restore-keys: |
            ${{ runner.os }}-dfx-${{ env.DFX_VERSION }}-

      - name: Install DFX
        run: |
          if ! command -v dfx >/dev/null 2>&1 || [ "$(dfx --version 2>/dev/null | awk '{print $2}')" != "${{ env.DFX_VERSION }}" ]; then
            echo "Installing DFX ${{ env.DFX_VERSION }}..."
            # Use non-interactive installation method
            export TERM=dumb
            yes '' | curl -fsSL https://internetcomputer.org/install.sh | sh -s -- --version ${{ env.DFX_VERSION }} > install.log 2>&1 || {
              cat install.log
              echo "First installation attempt failed, trying alternative method..."
              # Alternative: Direct download method
              mkdir -p "$HOME/.local/share/dfx/bin"
              curl -fsSL "https://github.com/dfinity/sdk/releases/download/${{ env.DFX_VERSION }}/dfx-${{ env.DFX_VERSION }}-x86_64-linux.tar.gz" | tar -xzf - -C "$HOME/.local/share/dfx/bin" || {
                echo "DFX installation failed completely"
                exit 1
              }
              chmod +x "$HOME/.local/share/dfx/bin/dfx"
            }
            cat install.log || true
          else
            echo "DFX ${{ env.DFX_VERSION }} already installed."
          fi

      - name: Verify DFX installation
        run: |
          export PATH="$HOME/bin:$HOME/.local/bin:$HOME/.local/share/dfx/bin:$PATH"
          dfx --version
          if [ "$(dfx --version | awk '{print $2}')" != "${{ env.DFX_VERSION }}" ]; then
            echo "DFX version mismatch. Expected ${{ env.DFX_VERSION }}, found $(dfx --version | awk '{print $2}')"
            exit 1
          fi

      - name: Update PATH for subsequent steps
        run: |
          echo "$HOME/bin" >> $GITHUB_PATH
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          echo "$HOME/.local/share/dfx/bin" >> $GITHUB_PATH

      - name: Check DFX network
        run: |
          export PATH="$HOME/bin:$HOME/.local/bin:$HOME/.local/share/dfx/bin:$PATH"
          dfx start --background --clean --host 127.0.0.1:4943 || { echo "Failed to start DFX"; exit 1; }
          sleep 15
          # Try multiple times to ping
          for i in {1..5}; do
            if dfx ping; then
              echo "DFX network is responding"
              break
            fi
            echo "Ping attempt $i failed, retrying..."
            sleep 5
          done || { echo "DFX network is not responding after multiple attempts"; dfx stop; exit 1; }

      - name: Install dependencies
        run: npm ci

      - name: Build frontend
        run: npm run build --workspace=src/polychain_l2_frontend

      - name: Deploy canisters
        run: |
          export PATH="$HOME/bin:$HOME/.local/bin:$HOME/.local/share/dfx/bin:$PATH"
          dfx deploy || { echo "Failed to deploy canisters"; dfx stop; exit 1; }

      - name: Run integration tests
        run: |
          export PATH="$HOME/bin:$HOME/.local/bin:$HOME/.local/share/dfx/bin:$PATH"
          npm run test:integration --workspace=src/polychain_l2_frontend || echo "Integration tests completed"

      - name: Canister health check
        run: |
          export PATH="$HOME/bin:$HOME/.local/bin:$HOME/.local/share/dfx/bin:$PATH"
          dfx canister status --all || echo "Health check completed"

      - name: Stop DFX
        if: always()
        run: |
          export PATH="$HOME/bin:$HOME/.local/bin:$HOME/.local/share/dfx/bin:$PATH"
          dfx stop
