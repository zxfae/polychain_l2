name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  DFX_VERSION: 0.15.2

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      rust: ${{ steps.filter.outputs.rust }}
      frontend: ${{ steps.filter.outputs.frontend }}
      dfx: ${{ steps.filter.outputs.dfx }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            rust:
              - 'src/**/*.rs'
              - 'Cargo.toml'
              - 'Cargo.lock'
              - 'src/**/Cargo.toml'
            frontend:
              - 'src/polychain_l2_frontend/**'
              - 'package.json'
              - 'package-lock.json'
              - 'tsconfig.json'
            dfx:
              - 'dfx.json'
              - 'src/**/*.did'

  rust-check:
    needs: changes
    if: needs.changes.outputs.rust == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust-version: [stable]
      fail-fast: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust-version }}
          components: rustfmt, clippy

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache cargo target
        uses: actions/cache@v4
        with:
          path: target/
          key: ${{ runner.os }}-cargo-target-${{ matrix.rust-version }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-target-${{ matrix.rust-version }}-
            ${{ runner.os }}-cargo-target-

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Run tests
        run: cargo test --verbose

      - name: Build backend
        run: cargo build --release --target wasm32-unknown-unknown

  frontend-check:
    needs: changes
    if: needs.changes.outputs.frontend == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18]
      fail-fast: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            src/polychain_l2_frontend/node_modules
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-

      - name: Install dependencies
        run: npm ci

      - name: Type check
        run: npm run build --workspace=src/polychain_l2_frontend

      - name: Run tests
        run: npm test --workspace=src/polychain_l2_frontend --if-present

  dfx-check:
    needs: changes
    if: needs.changes.outputs.dfx == 'true' || needs.changes.outputs.rust == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown

      - name: Cache DFX
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/dfinity
            ~/bin/dfx
            ~/.local/share/dfx
          key: ${{ runner.os }}-dfx-${{ env.DFX_VERSION }}-${{ hashFiles('dfx.json') }}
          restore-keys: |
            ${{ runner.os }}-dfx-${{ env.DFX_VERSION }}-

      - name: Install DFX
        run: |
          if ! command -v dfx >/dev/null 2>&1 || [ "$(dfx --version | awk '{print $2}')" != "${{ env.DFX_VERSION }}" ]; then
            echo "Installing DFX ${{ env.DFX_VERSION }}..."
            sh -c "$(curl -fsSL https://internetcomputer.org/install.sh)" -- --yes --version ${{ env.DFX_VERSION }}
          else
            echo "DFX ${{ env.DFX_VERSION }} already installed."
          fi

      - name: Verify DFX installation
        run: |
          export PATH="$HOME/bin:$HOME/.local/bin:$HOME/.local/share/dfx/bin:$PATH"
          dfx --version
          if [ "$(dfx --version | awk '{print $2}')" != "${{ env.DFX_VERSION }}" ]; then
            echo "DFX version mismatch. Expected ${{ env.DFX_VERSION }}, found $(dfx --version | awk '{print $2}')"
            exit 1
          fi

      - name: Update PATH for subsequent steps
        run: |
          echo "$HOME/bin" >> $GITHUB_PATH
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          echo "$HOME/.local/share/dfx/bin" >> $GITHUB_PATH

      - name: Start DFX
        run: |
          dfx start --background --clean
          sleep 5

      - name: Install dependencies
        run: npm ci

      - name: Deploy canisters
        run: dfx deploy --check

      - name: Stop DFX
        if: always()
        run: dfx stop

  security-scan:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

     
