name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v1.0.0)'
        required: true
        type: string

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get tag name
        id: tag
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "tag_name=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Generate changelog
        id: changelog
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          else
            PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          fi
          
          echo "## What's Changed" > changelog.md
          if [ -n "$PREVIOUS_TAG" ]; then
            git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD >> changelog.md
          else
            git log --pretty=format:"- %s (%h)" >> changelog.md
          fi
          
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat changelog.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.tag_name }}
          release_name: Release ${{ steps.tag.outputs.tag_name }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: ${{ contains(steps.tag.outputs.tag_name, '-') }}

  build-artifacts:
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache cargo target
        uses: actions/cache@v4
        with:
          path: target/
          key: ${{ runner.os }}-cargo-target-release-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-target-release-
            ${{ runner.os }}-cargo-target-

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            src/polychain_l2_frontend/node_modules
          key: ${{ runner.os }}-node-18-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-18-

      - name: Cache DFX
        uses: actions/cache@v4
        with:
          path: ~/.cache/dfinity
          key: ${{ runner.os }}-dfx-${{ hashFiles('dfx.json') }}
          restore-keys: |
            ${{ runner.os }}-dfx-

      - name: Install DFX
        run: |
          curl -fsSL https://internetcomputer.org/install.sh | sh
          echo "$HOME/.local/share/dfx/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: npm ci

      - name: Build backend
        run: |
          cargo build --release --target wasm32-unknown-unknown
          dfx build polychain_l2_backend

      - name: Build frontend
        run: |
          dfx build polychain_l2_frontend

      - name: Create release artifacts
        run: |
          mkdir -p release-artifacts
          
          # Copy WASM files
          cp .dfx/local/canisters/polychain_l2_backend/polychain_l2_backend.wasm release-artifacts/
          cp .dfx/local/canisters/polychain_l2_backend/polychain_l2_backend.did release-artifacts/
          
          # Create frontend bundle
          cd src/polychain_l2_frontend
          npm run build
          cd ../..
          tar -czf release-artifacts/frontend-dist.tar.gz -C src/polychain_l2_frontend/dist .
          
          # Create source bundle
          git archive --format=tar.gz --prefix=polychain-l2-source/ HEAD > release-artifacts/source-code.tar.gz
          
          # Create checksums
          cd release-artifacts
          sha256sum * > checksums.txt

      - name: Upload backend WASM
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./release-artifacts/polychain_l2_backend.wasm
          asset_name: polychain_l2_backend.wasm
          asset_content_type: application/wasm

      - name: Upload backend DID
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./release-artifacts/polychain_l2_backend.did
          asset_name: polychain_l2_backend.did
          asset_content_type: text/plain

      - name: Upload frontend bundle
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./release-artifacts/frontend-dist.tar.gz
          asset_name: frontend-dist.tar.gz
          asset_content_type: application/gzip

      - name: Upload source code
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./release-artifacts/source-code.tar.gz
          asset_name: source-code.tar.gz
          asset_content_type: application/gzip

      - name: Upload checksums
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./release-artifacts/checksums.txt
          asset_name: checksums.txt
          asset_content_type: text/plain

  deploy-production:
    needs: [create-release, build-artifacts]
    runs-on: ubuntu-latest
    environment: production
    if: ${{ !contains(github.ref, '-') }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown

      - name: Cache DFX
        uses: actions/cache@v4
        with:
          path: ~/.cache/dfinity
          key: ${{ runner.os }}-dfx-${{ hashFiles('dfx.json') }}
          restore-keys: |
            ${{ runner.os }}-dfx-

      - name: Install DFX
        run: |
          wget -O install-dfx.sh "https://raw.githubusercontent.com/dfinity/sdk/main/public/install-dfx.sh"
          DFXVM_INIT_YES=true bash install-dfx.sh < /dev/null
          echo "$HOME/.local/share/dfx/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: npm ci

      - name: Set up DFX identity
        run: |
          echo "${{ secrets.DFX_IDENTITY }}" | base64 -d > identity.pem
          dfx identity import github-actions identity.pem
          dfx identity use github-actions
          rm identity.pem

      - name: Deploy to mainnet
        run: |
          dfx deploy --network ic --with-cycles 1000000000000

      - name: Update release with deployment info
        uses: actions/github-script@v7
        with:
          script: |
            const { data: release } = await github.rest.repos.getRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ needs.create-release.outputs.release_id }}
            });
            
            const updatedBody = release.body + `\n\n## ðŸš€ Deployment\n- **Status**: âœ… Deployed to IC Mainnet\n- **Deployed at**: ${new Date().toISOString()}`;
            
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ needs.create-release.outputs.release_id }},
              body: updatedBody
            });
