searchState.loadedDescShard("polychain_l2_backend", 0, "Ajouter une transaction au séquenceur\nAnalyser les avantages du séquençage\nCréer et configurer un séquenceur de transactions\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRécupérer toutes les transactions confirmées\nRécupérer un bloc par son hash\nRécupérer tous les blocs de la blockchain\nStatistiques de la blockchain\nMétriques multi-chaînes\nRécupérer les derniers N blocs\nRécupérer les derniers blocs créés par le sequencer\nObtenir les métriques du séquenceur\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSéquencer un batch de transactions\nTest du consensus PoS Algorand\nInput validation and sanitization module Critical security …\nVérifier si une transaction est dans la blockchain\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nContains the error value\nContains the success value\nPoS Consensus with VRF (ton code)\nTransaction Sequencer for fair and deterministic ordering\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCryptographically secure hash calculation using Blake3 …\nCalculate hash from raw bytes (more efficient for binary …\nCalculate hash and return as bytes (for …\nImplementation of the PQ Falcon signature scheme Part of …\nImplementation of the PQ ML-DSA signature scheme Part of …\nImplementation of the Schnorr signature scheme Using the …\nECDSA signature scheme\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nImplementation of the SLH-DSA-SHA2-128f Post-Quantum …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nML-DSA-44 Post-Quantum signature scheme Pure Rust …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSchnorr signature scheme\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAddress validation utilities\nAmount validation utilities\nContains the error value\nString and batch validation utilities\nMaximum allowed batch size for operations\nMaximum allowed string length for addresses and identifiers\nMaximum allowed transaction amount (in smallest unit)\nMinimum allowed transaction amount (to prevent dust)\nContains the success value\nRate limiting and DOS protection\nComprehensive validation error types\nValidation result type\nDetect potentially malicious input patterns\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nValidate a generic blockchain address\nValidate transaction amount (in smallest unit, e.g., …\nValidate floating point amount and convert to integer\nValidate batch size\nValidate cryptographic algorithm name\nValidate hash string format\nValidate quantum threat level (0-100)\nValidate request frequency (basic rate limiting concept)\nValidate and sanitize generic string input")